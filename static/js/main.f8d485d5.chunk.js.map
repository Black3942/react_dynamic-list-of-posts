{"version":3,"sources":["types/NotificationType.ts","components/PostsList.tsx","components/Notification.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/NotificationMassege.ts","api/comments.ts","components/NewCommentForm.tsx","components/CommentMessage.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/users.ts","App.tsx","api/posts.ts","index.tsx"],"names":["NotificationType","PostsList","posts","currentPost","setPost","className","map","post","id","title","type","classNames","onClick","handleClick","Notification","massege","dataCy","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","NotificationMassege","client","getPostComments","postId","addComment","name","email","NewCommentForm","setComments","onNotification","useState","setName","setEmail","setBody","loading","setLoading","errors","setErrors","handleSubmit","e","a","preventDefault","newComment","current","ADD_COMMENT","handleChange","target","value","onSubmit","htmlFor","placeholder","onChange","CommentMessage","onDelete","href","PostDetails","postComments","setPostComments","newCommentForm","setNewCommentForm","NONE","notification","setNotification","hasError","NO_COMMENTS","getComments","comments","length","GET_COMMENTS","useEffect","handleDelete","commentId","deleteComment","filter","comment","danger","UserSelector","selectedUserId","setSelectedUserId","onError","users","setUsers","selectedUserName","setSelectedUserName","openList","setOpenList","dropdown","useRef","catch","GET_USERS","handleOnBlur","event","contains","document","addEventListener","removeEventListener","ref","role","user","selectUser","App","userPosts","setUserPosts","getPosts","userId","NO_POSTS","GET_POSTS","warning","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f8d485d5.chunk.js","sourcesContent":["export enum NotificationType {\n  danger = 'is-danger',\n  warning = 'is-warning',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  currentPost: Post | null;\n  setPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  currentPost,\n  setPost,\n}) => {\n  const handleClick = (post: Post) => {\n    if (currentPost?.id !== post.id) {\n      setPost(post);\n    } else {\n      setPost(null);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    {\n                      'is-light': currentPost?.id !== post.id,\n                    },\n                  )}\n                  onClick={() => handleClick(post)}\n                >\n                  {currentPost?.id !== post.id ? 'Open' : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { NotificationMassege } from '../types/NotificationMassege';\nimport { NotificationType } from '../types/NotificationType';\n\ntype Props = {\n  type: NotificationType;\n  massege: NotificationMassege;\n  dataCy?: string;\n};\n\nexport const Notification: React.FC<Props> = ({ type, massege, dataCy }) => (\n  <div\n    className={`notification ${type}`}\n    data-cy={dataCy}\n  >\n    {massege}\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum NotificationMassege {\n  NONE,\n  GET_USERS = 'Unable to get users',\n  NO_POSTS = 'No posts yet',\n  GET_POSTS = 'Something went wrong!',\n  GET_COMMENTS = 'Unable to get comments',\n  NO_COMMENTS = 'No comments yet',\n  ADD_COMMENT = 'Unable to add comment',\n  DELETE_COMMENT = 'Unable to delete comment',\n}\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (\n  postId: number, name: string, email: string, body: string,\n) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import classNames from 'classnames';\nimport React, {\n  ChangeEvent, FormEvent, SetStateAction, useState,\n} from 'react';\nimport { addComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\nimport { NotificationMassege } from '../types/NotificationMassege';\n\ntype Props = {\n  postId: number;\n  setComments: (comment: SetStateAction<Comment[]>) => void;\n  onNotification: (massege: NotificationMassege) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId, setComments, onNotification,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const handleSubmit = async (e: FormEvent) => {\n    e.preventDefault();\n\n    if (!name || !email || !body) {\n      setErrors({\n        name: !name,\n        email: !email,\n        body: !body,\n      });\n\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const newComment = await addComment(postId, name, email, body);\n\n      setComments(current => [...current, newComment]);\n    } catch {\n      onNotification(NotificationMassege.ADD_COMMENT);\n      setComments([]);\n    } finally {\n      setLoading(false);\n      setBody('');\n    }\n  };\n\n  const handleChange = (\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    switch (e.target.name) {\n      case 'name':\n        if (errors.name) {\n          setErrors(current => ({\n            ...current,\n            name: false,\n          }));\n        }\n\n        setName(e.target.value);\n        break;\n\n      case 'email':\n        if (errors.email) {\n          setErrors(current => ({\n            ...current,\n            email: false,\n          }));\n        }\n\n        setEmail(e.target.value);\n        break;\n\n      case 'body':\n        if (errors.body) {\n          setErrors(current => ({\n            ...current,\n            body: false,\n          }));\n        }\n\n        setBody(e.target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const clearFields = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n\n    setErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': errors.name },\n            )}\n            value={name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': errors.email },\n            )}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': errors.body },\n            )}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': loading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearFields}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","type Props = {\n  id: number;\n  name: string;\n  email: string;\n  body: string;\n  onDelete: (id: number) => void;\n};\n\nexport const CommentMessage: React.FC<Props> = ({\n  name, email, body, id, onDelete,\n}) => {\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => onDelete(id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Notification } from './Notification';\nimport { NotificationType } from '../types/NotificationType';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { deleteComment, getPostComments } from '../api/comments';\nimport { CommentMessage } from './CommentMessage';\nimport { NotificationMassege } from '../types/NotificationMassege';\n\ntype Props = {\n  post: Post | null;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n}) => {\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [newCommentForm, setNewCommentForm] = useState(false);\n  const [notification, setNotification] = useState<NotificationMassege>(\n    NotificationMassege.NONE,\n  );\n  const hasError = notification !== NotificationMassege.NONE\n    && notification !== NotificationMassege.NO_COMMENTS;\n\n  const getComments = async (postId: number) => {\n    try {\n      setLoading(true);\n      const comments = await getPostComments(postId);\n\n      if (!comments.length) {\n        setNotification(NotificationMassege.NO_COMMENTS);\n      }\n\n      setPostComments(comments);\n    } catch {\n      setNotification(NotificationMassege.GET_COMMENTS);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (post?.id) {\n      setPostComments([]);\n      setNewCommentForm(false);\n      setNotification(NotificationMassege.NONE);\n      getComments(post.id);\n    }\n  }, [post]);\n\n  useEffect(() => {\n    if (postComments.length > 0) {\n      setNotification(NotificationMassege.NONE);\n    }\n  }, [postComments]);\n\n  const handleDelete = (commentId: number) => {\n    deleteComment(commentId);\n    setPostComments((current: Comment[]) => {\n      return current.filter(comment => comment.id !== commentId);\n    });\n\n    if (postComments.length) {\n      setNotification(NotificationMassege.NO_COMMENTS);\n    }\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loading && <Loader />}\n\n          {(notification !== NotificationMassege.NONE)\n            && (notification !== NotificationMassege.NO_COMMENTS)\n            && (\n              <Notification\n                type={NotificationType.danger}\n                massege={notification}\n                dataCy=\"CommentsError\"\n              />\n            )}\n\n          {notification === NotificationMassege.NO_COMMENTS && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              {NotificationMassege.NO_COMMENTS}\n            </p>\n          )}\n\n          {!postComments.length || (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {postComments.map(comment => (\n                <CommentMessage\n                  key={comment.id}\n                  id={comment.id}\n                  name={comment.name}\n                  email={comment.email}\n                  body={comment.body}\n                  onDelete={handleDelete}\n                />\n              ))}\n            </>\n          )}\n\n          {(!loading && !newCommentForm && !hasError)\n            && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setNewCommentForm(true)}\n              >\n                Write a comment\n              </button>\n            )}\n        </div>\n\n        {(newCommentForm && !hasError) && (\n          <NewCommentForm\n            setComments={setPostComments}\n            postId={post?.id || 0}\n            onNotification={setNotification}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { getUsers } from '../api/users';\nimport { NotificationMassege } from '../types/NotificationMassege';\nimport { User } from '../types/User';\n\ntype Props = {\n  selectedUserId: number;\n  setSelectedUserId: (id: number) => void;\n  onError: (massege: NotificationMassege) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUserId, setSelectedUserId, onError,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserName, setSelectedUserName] = useState('');\n  const [openList, setOpenList] = useState(false);\n  const dropdown = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => onError(NotificationMassege.GET_USERS));\n  }, []);\n\n  const handleOnBlur = (event: MouseEvent) => {\n    if (dropdown.current\n      && !dropdown.current.contains(event.target as HTMLElement)) {\n      setOpenList(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleOnBlur);\n\n    return () => {\n      document.removeEventListener('click', handleOnBlur);\n    };\n  }, [openList]);\n\n  const selectUser = (user: User) => {\n    if (user.id !== selectedUserId) {\n      setSelectedUserId(user.id);\n      setSelectedUserName(user.name);\n    }\n\n    setOpenList(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': openList },\n      )}\n      ref={dropdown}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setOpenList(current => !current)}\n        >\n          <span>{selectedUserName || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.id === selectedUserId },\n              )}\n              onClick={() => selectUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUserPosts } from './api/posts';\nimport { Post } from './types/Post';\nimport { Notification } from './components/Notification';\nimport { NotificationType } from './types/NotificationType';\nimport { NotificationMassege } from './types/NotificationMassege';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [post, setPost] = useState<Post | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [notification, setNotification] = useState<NotificationMassege>(\n    NotificationMassege.NONE,\n  );\n\n  const getPosts = async (userId: number) => {\n    try {\n      setLoading(true);\n      const posts = await getUserPosts(userId);\n\n      if (!posts.length) {\n        setNotification(NotificationMassege.NO_POSTS);\n      }\n\n      setUserPosts(posts);\n    } catch {\n      setNotification(NotificationMassege.GET_POSTS);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedUserId) {\n      setUserPosts([]);\n      setPost(null);\n      setNotification(NotificationMassege.NONE);\n      getPosts(selectedUserId);\n    }\n  }, [selectedUserId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUserId={selectedUserId}\n                  setSelectedUserId={setSelectedUserId}\n                  onError={setNotification}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {loading && <Loader />}\n\n                {notification === NotificationMassege.GET_POSTS && (\n                  <Notification\n                    type={NotificationType.danger}\n                    massege={notification}\n                    dataCy=\"PostsLoadingError\"\n                  />\n                )}\n\n                {notification === NotificationMassege.NO_POSTS && (\n                  <Notification\n                    type={NotificationType.warning}\n                    massege={notification}\n                    dataCy=\"NoPostsYet\"\n                  />\n                )}\n\n                {!userPosts.length || (\n                  <PostsList\n                    posts={userPosts}\n                    currentPost={post}\n                    setPost={setPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': post },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {post && (\n                <PostDetails\n                  post={post}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}